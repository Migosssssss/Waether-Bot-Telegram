import os
import logging
import requests
import datetime
import ephem
from functools import lru_cache
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode
from aiogram.utils import executor

TELEGRAM_API_TOKEN = ''
WEATHER_API_KEY = 'a0dd09dd0d80fbe03d16062a53d'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_API_TOKEN)
dp = Dispatcher(bot)

BASE_URL = "http://api.openweathermap.org/data/2.5/"
UNITS = "metric"
CACHE_SIZE = 128
CACHE_TIME = 600

@lru_cache(maxsize=CACHE_SIZE, typed=False)
def cached_request(url: str, cache_time: int = CACHE_TIME):
    response = requests.get(url)
    response.raise_for_status()
    
    response_data = response.json()
    response_data['_request_time'] = datetime.datetime.utcnow()
    
    return response_data

def get_weather_data(city, endpoint, cache_time=CACHE_TIME):
    url = f'{BASE_URL}{endpoint}?q={city}&appid={WEATHER_API_KEY}&units={UNITS}'
    now = datetime.datetime.utcnow()
    
    try:
        data = cached_request(url)
        
        if (now - data['_request_time']) > datetime.timedelta(seconds=cache_time):
            data = cached_request(url, cache_time)
    except requests.exceptions.RequestException as e:
        logging.error(e)
        raise RuntimeError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    
    return data

async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–≥–æ–¥–Ω–∏–∫. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

async def help_command(message: types.Message):
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±–º–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ª–ª–∞—Ä–∞ –°–®–ê. "
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/weather <–≥–æ—Ä–æ–¥> - —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "/forecast <–≥–æ—Ä–æ–¥> - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "/sunrise_sunset <–≥–æ—Ä–æ–¥> - –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞ —Å–æ–ª–Ω—Ü–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "/humidity <–≥–æ—Ä–æ–¥> - —Ç–µ–∫—É—â–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "/wind <–≥–æ—Ä–æ–¥> - —Ç–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "/cloudiness <–≥–æ—Ä–æ–¥> - —Ç–µ–∫—É—â–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "/uvi <–≥–æ—Ä–æ–¥> - —Ç–µ–∫—É—â–∏–π —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "/minutely_precipitation <–≥–æ—Ä–æ–¥> - –ø—Ä–æ–≥–Ω–æ–∑ –æ—Å–∞–¥–∫–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 60 –º–∏–Ω—É—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "/exchange_rates - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±–º–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ª–ª–∞—Ä–∞ –°–®–ê\n"
        "/convert <—Å—É–º–º–∞> <–∏–∑_–≤–∞–ª—é—Ç—ã> <–≤_–≤–∞–ª—é—Ç—É> - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—É–º–º—ã –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –æ–±–º–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"
    )
    await message.reply(help_text)


async def weather(message: types.Message):
    city = message.text[9:]
    if not city:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /weather <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ.")
        return

    try:
        weather_data = get_weather_data(city, "weather")
    except RuntimeError as e:
        logging.error(e)
        await message.reply(str(e))
        return

    text = format_weather_data(weather_data, city)
    await message.reply(text, parse_mode=ParseMode.MARKDOWN)

async def sunrise_sunset(message: types.Message):
    city = message.text[15:]
    if not city:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /sunrise_sunset <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ—Å—Ö–æ–¥–µ –∏ –∑–∞–∫–∞—Ç–µ —Å–æ–ª–Ω—Ü–∞.")
        return

    try:
        weather_data = get_weather_data(city, "weather")
    except RuntimeError as e:
        logging.error(e)
        await message.reply(str(e))
        return

    sunrise = weather_data['sys']['sunrise']
    sunset = weather_data['sys']['sunset']

    sunrise = datetime.datetime.utcfromtimestamp(sunrise).strftime('%H:%M')
    sunset = datetime.datetime.utcfromtimestamp(sunset).strftime('%H:%M')

    info = f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise}\nüåá –ó–∞–∫–∞—Ç: {sunset}"
    await message.reply(info)

def format_forecast_info(forecast_data, city):
    output_lines = [f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ *{city}* –Ω–∞ 3 –¥–Ω—è:\n"]
    days = {i: [] for i in range(1, 4)}

    for entry in forecast_data['list']:
        timestamp = entry['dt']
        date = datetime.datetime.utcfromtimestamp(timestamp).date()
        day_diff = (date - datetime.datetime.utcnow().date()).days

        if day_diff in days:
            days[day_diff].append(entry)

    for day, weather_entries in days.items():
        daily_weather = min(weather_entries, key=lambda x: x['main']['temp'])
        output_lines.append(format_weather_data(daily_weather, city, day))

    return "\n\n".join(output_lines)

async def forecast(message: types.Message):
    city = message.text[10:]
    if not city:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /forecast <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è.")
        return

    try:
        forecast_data = get_weather_data(city, "forecast")
    except RuntimeError as e:
        logging.error(e)
        await message.reply(str(e))
        return

    text = format_forecast_info(forecast_data, city)
    await message.reply(text, parse_mode=ParseMode.MARKDOWN)

def format_weather_data(weather_data, city, day=None):
    main = weather_data['main']
    weather = weather_data['weather'][0]

    temp = main['temp']
    feels_like = main['feels_like']
    temp_min = main['temp_min']
    temp_max = main['temp_max']
    pressure = main['pressure']
    humidity = main['humidity']

    wind = weather_data['wind']
    wind_speed = wind['speed']
    wind_deg = wind['deg']

    weather_desc = weather['description'].capitalize()

    if day is None:
        day_info = ""
    else:
        day_info = f" –¥–ª—è *–î–Ω—è {day}*"

    info = (
        f"üåç –ü–æ–≥–æ–¥–∞ –≤ *{city}*{day_info}\n\n"
        f"‚òÅÔ∏è {weather_desc}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
        f"‚ÜïÔ∏è –ú–∏–Ω: {temp_min}¬∞C, –ú–∞–∫—Å: {temp_max}¬∞C\n"
        f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} hPa\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"üå¨ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å, {wind_deg}¬∞"
    )
    return info

async def exchange_rates(message: types.Message):
    url = "https://api.exchangerate-api.com/v4/latest/USD"

    try:
        data = cached_request(url, CACHE_TIME)
    except requests.exceptions.RequestException as e:
        logging.error(e)
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return

    info = format_exchange_rates_info(data)
    await message.reply(info)

def format_exchange_rates_info(data):
    output = ["–ö—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ {}:\n\n".format(data['base'])]

    for currency, rate in data['rates'].items():
        if currency in ["EUR", "GBP", "JPY", "RUB", "CNY"]:
            output.append("{}: {:.2f}".format(currency, rate))

    return "\n".join(output)

def get_exchange_rate(from_currency, to_currency):
    url = f"https://api.exchangerate-api.com/v4/latest/{from_currency}"
    data = cached_request(url, CACHE_TIME)
    return data['rates'][to_currency]

def convert_currency(amount, from_currency, to_currency):
    exchange_rate = get_exchange_rate(from_currency, to_currency)
    return amount * exchange_rate

async def currency_conversion(message: types.Message):
    arguments = message.text.split()
    if len(arguments) != 4:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç: `/convert <—Å—É–º–º–∞> <–∏–∑_–≤–∞–ª—é—Ç—ã> <–≤_–≤–∞–ª—é—Ç—É>`")
        return

    _, amount, from_currency, to_currency = arguments

    try:
        amount = float(amount)
        converted_amount = convert_currency(amount, from_currency, to_currency)
        result = f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {amount} {from_currency} ‚û°Ô∏è {converted_amount:.2f} {to_currency}"
        await message.reply(result)
    except ValueError:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
    except KeyError:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–¥—ã –≤–∞–ª—é—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: USD, EUR, GBP.")
async def on_any_message(message: types.Message):
    logging.info(f"Received message:\n\n{message.text}")

async def humidity(message: types.Message):
    city = message.text[9:]
    if not city:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /humidity <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –≤–ª–∞–∂–Ω–æ—Å—Ç–∏.")
        return

    try:
        weather_data = get_weather_data(city, "weather")
    except RuntimeError as e:
        logging.error(e)
        await message.reply(str(e))
        return

    humidity = weather_data["main"]["humidity"]
    await message.reply(f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤ {city}: {humidity}%")

dp.register_message_handler(humidity, commands=['humidity'])

async def wind(message: types.Message):
    city = message.text[6:]
    if not city:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /wind <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞.")
        return

    try:
        weather_data = get_weather_data(city, "weather")
    except RuntimeError as e:
        logging.error(e)
        await message.reply(str(e))
        return

    wind_speed = weather_data["wind"]["speed"]
    await message.reply(f"üå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤ {city}: {wind_speed} –º/—Å")

dp.register_message_handler(wind, commands=['wind'])

async def cloudiness(message: types.Message):
    city = message.text[12:]
    if not city:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /cloudiness <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏.")
        return

    try:
        weather_data = get_weather_data(city, "weather")
    except RuntimeError as e:
        logging.error(e)
        await message.reply(str(e))
        return

    clouds = weather_data["clouds"]["all"]
    await message.reply(f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å –≤ {city}: {clouds}%")

dp.register_message_handler(cloudiness, commands=['cloudiness'])

async def uvi(message: types.Message):
    city = message.text[5:]
    if not city:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /uvi <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º –∏–Ω–¥–µ–∫—Å–µ.")
        return

    try:
        weather_data = get_weather_data(city, "weather")
        lat = weather_data["coord"]["lat"]
        lon = weather_data["coord"]["lon"]
        
        url = f'{BASE_URL}uvi?appid={WEATHER_API_KEY}&lat={lat}&lon={lon}'
        uvi_data = cached_request(url)
    except RuntimeError as e:
        logging.error(e)
        await message.reply(str(e))
        return

    uvi_value = uvi_data["value"]
    await message.reply(f"üåû –£–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å (UVI) –≤ {city}: {uvi_value}")

dp.register_message_handler(uvi, commands=['uvi'])

async def minutely_precipitation(message: types.Message):
    city = message.text[21:]
    if not city:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /minutely_precipitation <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏–Ω—É—Ç–Ω–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ –æ—Å–∞–¥–∫–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 60 –º–∏–Ω—É—Ç.")
        return

    try:
        weather_data = get_weather_data(city, "weather")
        lat = weather_data["coord"]["lat"]
        lon = weather_data["coord"]["lon"]

        url = f'{BASE_URL}onecall?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}&units={UNITS}&exclude=current,hourly,daily,alerts'
        minutely_data = cached_request(url)
    except RuntimeError as e:
        logging.error(e)
        await message.reply(str(e))
        return

    minutely_precipitation = minutely_data["minutely"]

    reply_text = f"üåß –ú–∏–Ω—É—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Å–∞–¥–∫–æ–≤ –≤ {city} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 60 –º–∏–Ω—É—Ç:\n\n"
    for minute_data in minutely_precipitation:
        dt = datetime.datetime.utcfromtimestamp(minute_data["dt"]).strftime("%H:%M")
        precipitation = minute_data["precipitation"]
        reply_text += f"{dt}: {precipitation} –º–º\n"

    await message.reply(reply_text)

dp.register_message_handler(minutely_precipitation, commands=['minutely_precipitation'])

def get_phase_of_moon(city):
    try:
        weather_data = get_weather_data(city, "weather")
        dt = datetime.datetime.utcfromtimestamp(weather_data["dt"])
    except RuntimeError as e:
        logging.error(e)
        raise

    observer = ephem.city(city)
    moon = ephem.Moon(observer)
    phase = moon.moon_phase
    
    return phase, dt

async def moon_phase(message: types.Message):
    city = message.text[11:]
    if not city:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /moon_phase <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ –ª—É–Ω—ã.")
        return

    try:
        phase, dt = get_phase_of_moon(city)
    except RuntimeError as e:
        logging.error(e)
        await message.reply(str(e))
        return

    info = f"üåñ –§–∞–∑–∞ –ª—É–Ω—ã –≤ {city} –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ {dt.strftime('%Y-%m-%d %H:%M:%S')} UTC: {phase:.2f}"
    await message.reply(info)

dp.register_message_handler(moon_phase, commands=['moon_phase'])

async def feels_like(message: types.Message):
    city = message.text[11:]
    if not city:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /feels_like <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, –∫–∞–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—â—É—â–∞–µ—Ç—Å—è –Ω–∞ —É–ª–∏—Ü–µ.")
        return

    try:
        weather_data = get_weather_data(city, "weather")
    except RuntimeError as e:
        logging.error(e)
        await message.reply(str(e))
        return

    feels_like_temperature = weather_data["main"]["feels_like"]
    await message.reply(f"üå° –û—â—É—â–∞–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city}: {feels_like_temperature}¬∞C")

dp.register_message_handler(feels_like, commands=['feels_like'])

async def visibility(message: types.Message):
    city = message.text[11:]
    if not city:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /visibility <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–∏–º–æ—Å—Ç–∏.")
        return

    try:
        weather_data = get_weather_data(city, "weather")
    except RuntimeError as e:
        logging.error(e)
        await message.reply(str(e))
        return

    visibility = weather_data["visibility"]
    await message.reply(f"üëÅ –í–∏–¥–∏–º–æ—Å—Ç—å –≤ {city}: {visibility} –º–µ—Ç—Ä–æ–≤")

dp.register_message_handler(visibility, commands=['visibility'])

async def air_pressure(message: types.Message):
    city = message.text[13:]
    if not city:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ /air_pressure <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–º –¥–∞–≤–ª–µ–Ω–∏–∏.")
        return

    try:
        weather_data = get_weather_data(city, "weather")
    except RuntimeError as e:
        logging.error(e)
        await message.reply(str(e))
        return

    pressure = weather_data["main"]["pressure"]
    await message.reply(f"üìä –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ {city}: {pressure} hPa")

dp.register_message_handler(air_pressure, commands=['air_pressure'])



dp.register_message_handler(start, commands=['start'])
dp.register_message_handler(help_command, commands=['help'])
dp.register_message_handler(weather, commands=['weather'])
dp.register_message_handler(sunrise_sunset, commands=['sunrise_sunset'])
dp.register_message_handler(forecast, commands=['forecast'])
dp.register_message_handler(exchange_rates, commands=['exchange_rates'])
dp.register_message_handler(currency_conversion, commands=['convert'])
dp.register_message_handler(on_any_message, content_types=['text'])
dp.register_message_handler(humidity, commands=['humidity'])
dp.register_message_handler(wind, commands=['wind'])
dp.register_message_handler(cloudiness, commands=['cloudiness'])
dp.register_message_handler(uvi, commands=['uvi'])
dp.register_message_handler(minutely_precipitation, commands=['minutely_precipitation'])


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
